{{- if .Values.configMap.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: run-config
  labels:
    {{- include "llama-stack.labels" . | nindent 4 }}
data:
  config.yaml: |-
    version: '2'
    image_name: remote-vllm
    apis:
    - agents
    - datasetio
    - eval
    - inference
    - safety
    - scoring
    - telemetry
    - tool_runtime
    - vector_io
    providers:
      inference:
      - provider_id: llama-3b
        provider_type: remote::vllm
        config:
          url: ${env.LLAMA3B_URL:http://localhost:8000/v1}
          max_tokens: ${env.LLAMA3B_TOKENS:15000}
          api_token: ${env.LLAMA3B_API_TOKEN:fake}
          tls_verify: ${env.LLAMA3B_TLS_VERIFY:false}
      - provider_id: deepseek
        provider_type: remote::vllm
        config:
          url: ${env.DEEPSEEK_URL:http://localhost:8000/v1}
          max_tokens: ${env.DEEPSEEK_TOKENS:10000}
          api_token: ${env.DEEPSEEK_API_TOKEN:fake}
          tls_verify: ${env.DEEPSEEK_TLS_VERIFY:false}
      - provider_id: sentence-transformers
        provider_type: inline::sentence-transformers
        config: {}
      vector_io:
      - provider_id: milvus
        provider_type: inline::milvus
        config:
          db_path: ${env.MILVUS_DB_PATH}
      safety:
      - provider_id: llama-guard
        provider_type: inline::llama-guard
        config:
          excluded_categories: []
      agents:
      - provider_id: meta-reference
        provider_type: inline::meta-reference
        config:
          persistence_store:
            type: sqlite
            namespace: null
            db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/agents_store.db
          responses_store:
            type: sqlite
            db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/responses_store.db
      eval:
      - provider_id: meta-reference
        provider_type: inline::meta-reference
        config:
          kvstore:
            type: sqlite
            namespace: null
            db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/meta_reference_eval.db
      datasetio:
      - provider_id: huggingface
        provider_type: remote::huggingface
        config:
          kvstore:
            type: sqlite
            namespace: null
            db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/huggingface_datasetio.db
      - provider_id: localfs
        provider_type: inline::localfs
        config:
          kvstore:
            type: sqlite
            namespace: null
            db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/localfs_datasetio.db
      scoring:
      - provider_id: basic
        provider_type: inline::basic
        config: {}
      - provider_id: llm-as-judge
        provider_type: inline::llm-as-judge
        config: {}
      - provider_id: braintrust
        provider_type: inline::braintrust
        config:
          openai_api_key: ${env.OPENAI_API_KEY:}
      telemetry:
      - provider_id: meta-reference
        provider_type: inline::meta-reference
        config:
          service_name: ${env.OTEL_SERVICE_NAME:llama-stack}
          sinks: ${env.TELEMETRY_SINKS:console, sqlite}
          otel_trace_endpoint: ${env.OTEL_TRACE_ENDPOINT:}
          sqlite_db_path: ${env.SQLITE_DB_PATH:~/.llama/distributions/remote-vllm/trace_store.db}
      tool_runtime:
      - provider_id: rag-runtime
        provider_type: inline::rag-runtime
        config: {}
      - provider_id: model-context-protocol
        provider_type: remote::model-context-protocol
        config: {}
      {{- with .Values.toolRuntimes }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
    metadata_store:
      type: sqlite
      db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/registry.db
    inference_store:
      type: sqlite
      db_path: ${env.SQLITE_STORE_DIR:~/.llama/distributions/remote-vllm}/inference_store.db
    models:
    - metadata: {}
      model_id: ${env.LLAMA3B_MODEL}
      provider_id: llama-3b
      model_type: llm
    - metadata: {}
      model_id: ${env.DEEPSEEK_MODEL}
      provider_id: deepseek
      model_type: llm
    - metadata:
        embedding_dimension: 384
      model_id: all-MiniLM-L6-v2
      provider_id: sentence-transformers
      model_type: embedding
    shields: []
    vector_dbs: []
    datasets: []
    scoring_fns: []
    benchmarks: []
    tool_groups:
    {{- with .Values.toolGroups }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
    - toolgroup_id: builtin::rag
      provider_id: rag-runtime
    {{- range .Values.mcpServers }}
    - toolgroup_id: mcp::{{ .name }}
      provider_id: model-context-protocol
      mcp_endpoint:
        uri: {{ .uri }}
    {{- end }}
    server:
      port: 8321
{{- end }}